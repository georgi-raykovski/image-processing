#include <QApplication>
#include <QWidget>
#include <QLabel>
#include <QVBoxLayout>
#include <QString>
#include <QPainter>
#include <QPen>
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <fftw3.h>

// Function to read MNIST image data from file
std::vector<std::vector<int>> readMNIST(const std::string &filename)
{
    std::ifstream file(filename, std::ios::binary);
    if (!file.is_open())
    {
        std::cerr << "Error opening file: " << filename << std::endl;
        return {};
    }

    // Skip magic number, number of images, rows, and columns
    file.seekg(16);

    const int rows = 28;
    const int cols = 28;
    std::vector<std::vector<int>> images;
    // while (!file.eof())
    // { 
    //     std::vector<int> image(rows * cols);
    //     file.read(reinterpret_cast<char *>(image.data()), rows * cols);
    //     if (!file.eof())
    //         images.push_back(image);
    // }
     for (int i = 0; i < 10; ++i)
    { // Process the first two images
        std::vector<int> image(rows * cols);
        file.read(reinterpret_cast<char *>(image.data()), rows * cols);
        images.push_back(image);
    }

    file.close();
    return images;
}
// Function to extract contours from the image
std::vector<std::pair<int, int>> extractContour(const std::vector<int> &image, int rows, int cols)
{
    std::vector<std::pair<int, int>> contour;

    // Find the first non-zero pixel in the image
    int startRow = 0, startCol = 0;
    for (int i = 0; i < rows * cols; ++i)
    {
        if (image[i] > 0)
        {
            startRow = i / cols;
            startCol = i % cols;
            break;
        }
    }

    // Traverse the contour
    int currentRow = startRow, currentCol = startCol;
    int direction = 0; // 0: right, 1: down, 2: left, 3: up
    do
    {
        contour.push_back({currentRow, currentCol});
        int nextRow = currentRow, nextCol = currentCol;
        switch (direction)
        {
        case 0: // Right
            nextCol++;
            if (nextCol == cols || image[nextRow * cols + nextCol] == 0)
            {
                direction = 1; // Change direction to down
                nextRow++;
            }
            break;
        case 1: // Down
            nextRow++;
            if (nextRow == rows || image[nextRow * cols + nextCol] == 0)
            {
                direction = 2; // Change direction to left
                nextCol--;
            }
            break;
        case 2: // Left
            nextCol--;
            if (nextCol < 0 || image[nextRow * cols + nextCol] == 0)
            {
                direction = 3; // Change direction to up
                nextRow--;
            }
            break;
        case 3: // Up
            nextRow--;
            if (nextRow < 0 || image[nextRow * cols + nextCol] == 0)
            {
                direction = 0; // Change direction to right
                nextCol++;
            }
            break;
        }
        currentRow = nextRow;
        currentCol = nextCol;
    } while (currentRow != startRow || currentCol != startCol);

    return contour;
}

std::vector<std::vector<double>> applyFFT(const std::vector<std::pair<int, int>> &contour, int fftSize)
{
    const int N = contour.size();
    std::vector<std::vector<double>> fftCoefficients(fftSize, std::vector<double>(2));

    // Allocate memory for FFTW input and output arrays
    fftw_complex *in, *out;
    in = (fftw_complex *)fftw_malloc(sizeof(fftw_complex) * fftSize);
    out = (fftw_complex *)fftw_malloc(sizeof(fftw_complex) * fftSize);

    // Populate the input array with contour coordinates
    for (int i = 0; i < N; ++i)
    {
        in[i][0] = contour[i].first;
        in[i][1] = contour[i].second;
    }

    // Create FFTW plan
    fftw_plan p;
    p = fftw_plan_dft_1d(fftSize, in, out, FFTW_FORWARD, FFTW_ESTIMATE);

    // Execute FFT
    fftw_execute(p);

    // Copy FFT result to output vector
    for (int i = 0; i < fftSize; ++i)
    {
        fftCoefficients[i][0] = out[i][0]; // Real part
        fftCoefficients[i][1] = out[i][1]; // Imaginary part
    }

    // Clean up
    fftw_destroy_plan(p);
    fftw_free(in);
    fftw_free(out);

    return fftCoefficients;
}

void drawFFTImage(QPainter &painter, const std::vector<std::vector<double>> &fftCoefficients)
{
    // Configure the pen for drawing lines
    QPen pen(Qt::white);
    pen.setWidth(2);
    painter.setPen(pen);

    // Draw lines representing FFT coefficients
    int y = 0;
    for (size_t i = 0; i < fftCoefficients.size(); ++i)
    {
        // Calculate x-coordinate based on FFT coefficient values
        double real = fftCoefficients[i][0];
        double imag = fftCoefficients[i][1];
        double magnitude = std::sqrt(real * real + imag * imag);
        int x = static_cast<int>(200 + magnitude); // Invert x-coordinate for correct orientation

        // Draw a line from the previous point to the current point
        painter.drawLine(200, y, x, y);

        // Move to the next y-coordinate
        y += 2; // Adjust spacing between lines for better visibility
    }
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    // Read MNIST dataset
    std::vector<std::vector<int>> mnistImages = readMNIST("train-images-idx3-ubyte");
    
    // Apply FFT for all images
    int fftSize = 512; // Choose appropriate FFT size
    std::vector<std::vector<std::vector<double>>> allFftCoefficients;
    for (const auto &image : mnistImages)
    {
        std::vector<std::pair<int, int>> contour = extractContour(image, 28, 28);
        std::vector<std::vector<double>> fftCoefficients = applyFFT(contour, fftSize);
        allFftCoefficients.push_back(fftCoefficients);
    }
    // std::vector<int> firstImage = mnistImages[0];  // Get the first image from the dataset
    // std::vector<int> secondImage = mnistImages[1]; // Get the second image from the dataset

    // // Extract contours and apply FFT for the first image
    // std::vector<std::pair<int, int>> firstContour = extractContour(firstImage, 28, 28);
    // std::vector<std::vector<double>> firstFftCoefficients = applyFFT(firstContour, 512);

    // // Extract contours and apply FFT for the second image
    // std::vector<std::pair<int, int>> secondContour = extractContour(secondImage, 28, 28);
    // std::vector<std::vector<double>> secondFftCoefficients = applyFFT(secondContour, 512);

    // // Create images to draw lines representing FFT coefficients for the first and second images
    // QImage firstFftImage(512, 512, QImage::Format_Grayscale8);
    // QImage secondFftImage(512, 512, QImage::Format_Grayscale8);

    // // Set up QPainter to draw on the FFT images
    // QPainter firstFftPainter(&firstFftImage);
    // QPainter secondFftPainter(&secondFftImage);
    // firstFftPainter.setRenderHint(QPainter::Antialiasing);
    // secondFftPainter.setRenderHint(QPainter::Antialiasing);

    // // Draw lines representing FFT coefficients for the first image
    // drawFFTImage(firstFftPainter, firstFftCoefficients);

    // // Draw lines representing FFT coefficients for the second image
    // drawFFTImage(secondFftPainter, secondFftCoefficients);

    // // Create QLabel objects to display the FFT coefficient images
    // QLabel firstFftLabel;
    // firstFftLabel.setPixmap(QPixmap::fromImage(firstFftImage));

    // QLabel secondFftLabel;
    // secondFftLabel.setPixmap(QPixmap::fromImage(secondFftImage));

    // // Create a QWidget to contain both labels
    // QWidget widget;
    // QVBoxLayout layout(&widget);
    // layout.addWidget(&firstFftLabel);
    // layout.addWidget(&secondFftLabel);
    // widget.show();

    // return app.exec();
}
